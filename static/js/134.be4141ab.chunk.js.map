{"version":3,"file":"static/js/134.be4141ab.chunk.js","mappings":"oMAGMA,EAAW,gBAAGA,EAAH,EAAGA,SAAH,OAAmBA,EAAW,cAAgB,MAA9C,EACJC,EAAa,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACrBC,GAAWC,EAAAA,EAAAA,MACjB,OACE,eAAIC,UAAU,cAAd,SACGH,EAAOI,KAAI,SAAAC,GAAK,OACf,eAAmBF,UAAU,aAA7B,UACE,SAAC,KAAD,CACEG,GAAE,kBAAaD,EAAME,IACrBC,MAAO,CAAEC,KAAMR,GACfE,UAAWL,EAHb,SAKGO,EAAMK,OAASL,EAAMM,QANjBN,EAAME,GADA,KAatB,C,iHCwCD,UAxDe,WACb,OAA0BK,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAcF,EAAaG,IAAI,SACrC,GAA4BP,EAAAA,EAAAA,UAAS,IAArC,eAAOZ,EAAP,KAAeoB,EAAf,KACA,GAAkCR,EAAAA,EAAAA,WAAS,GAA3C,eAAOS,EAAP,KAAkBC,EAAlB,KACA,GAA0BV,EAAAA,EAAAA,UAAS,IAAnC,eAAOW,EAAP,KAAcC,EAAd,MAEAC,EAAAA,EAAAA,YAAU,WACHP,IAGL,iBAAC,6FACCI,GAAa,GADd,mBAG6BI,EAAAA,EAAAA,IAAkBR,GAH/C,gBAGWS,EAHX,EAGWA,QACRP,EAAUO,GAJb,gDAMGH,EAAS,EAAD,IANX,yBAQGV,EAASI,GACTI,GAAa,GAThB,2EAAD,EAYD,GAAE,CAACJ,IAWJ,OACE,4BACE,oCACA,kBAAMU,SARW,SAAAC,GACnBA,EAAEC,iBACFb,EAAgB,CAAEJ,MAAAA,GACnB,EAKiCV,UAAU,OAAxC,WACE,kBACE4B,KAAK,OACLC,MAAOnB,EACPoB,SAhBa,SAAC,GAA2B,IAAfD,EAAc,EAAxBE,OAAUF,MAChClB,EAASkB,EACV,EAeOG,YAAY,YAEd,mBAAQJ,KAAK,SAAS5B,UAAU,eAAhC,wBAIF,SAAC,IAAD,CAAYH,OAAQA,IACnBqB,IAAa,mCACbE,IAAS,oLAGf,C,+LCzDDa,EAAAA,EAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAS,mCAEFC,EAAa,mCAAG,2GAC3BC,EAD2B,oDAE3BC,EAF2B,gCAIRJ,EAAAA,EAAAA,IAAA,UAAaG,EAAb,oBAAkCF,GAAUG,GAJpC,cAIrBC,EAJqB,yBAKpBA,EAAKC,MALe,2CAAH,qDAQbhB,EAAiB,mCAAG,WAAOb,EAAO2B,GAAd,uFACZJ,EAAAA,EAAAA,IAAA,+BACOC,EADP,iCACsCxB,EADtC,+BAEjB2B,GAH6B,cACzBC,EADyB,yBAKxBA,EAAKC,MALmB,2CAAH,wDAQjBC,EAAkB,mCAAG,WAAOpC,GAAP,8FAAWqC,EAAX,+BAA4B,GAAIJ,EAAhC,gCACbJ,EAAAA,EAAAA,IAAA,gBACR7B,GADQ,OACHqC,EADG,oBACuBP,EADvB,mBAEjBG,GAH8B,cAC1BC,EAD0B,yBAKzBA,EAAKC,MALoB,2CAAH,sDAQlBG,EAAa,mCAAG,WAAMC,GAAN,uFACRV,EAAAA,EAAAA,IAAA,gBACRU,EADQ,4BACmBT,EADnB,oBADQ,cACrBI,EADqB,yBAIpBA,EAAKC,KAAKK,MAJU,2CAAH,sDAObC,EAAgB,mCAAG,WAAMF,GAAN,uFACXV,EAAAA,EAAAA,IAAA,gBACRU,EADQ,4BACmBT,EADnB,oBADW,cACxBI,EADwB,yBAIvBA,EAAKC,KAAKf,SAJa,2CAAH,qD","sources":["components/MoviesList/MoviesList.jsx","pages/Movies.jsx","services/apiService.js"],"sourcesContent":["import { NavLink, useLocation } from 'react-router-dom';\n//import { propTypes } from 'prop-types';\n\nconst isActive = ({ isActive }) => (isActive ? 'active_card' : 'card');\nexport const MoviesList = ({ movies }) => {\n  const location = useLocation();\n  return (\n    <ul className=\"render_List\">\n      {movies.map(movie => (\n        <li key={movie.id} className=\"renderCard\">\n          <NavLink\n            to={`/movies/${movie.id}`}\n            state={{ from: location }}\n            className={isActive}\n          >\n            {movie.title || movie.name}\n          </NavLink>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\n//MoviesList.propTypes = {\n//   movies: propTypes.array.Of(\n//     propTypes.shape({\n//       id: propTypes.number.isRequired,\n//       title: propTypes.string.isRequired,\n//       name: propTypes.string.isRequired,\n//     })\n//   ),\n//movies: propTypes.array,\n//};\n","import { MoviesList } from 'components/MoviesList/MoviesList';\nimport { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { fetchMovieByQuery } from 'services/apiService';\n\nconst Movies = () => {\n  const [query, setQuery] = useState('');\n  const [searchParams, setSearchParams] = useSearchParams();\n  const searchQuery = searchParams.get('query');\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    if (!searchQuery) {\n      return;\n    }\n    (async () => {\n      setIsLoading(true);\n      try {\n        const { results } = await fetchMovieByQuery(searchQuery);\n        setMovies(results);\n      } catch (error) {\n        setError(error);\n      } finally {\n        setQuery(searchQuery);\n        setIsLoading(false);\n      }\n    })();\n  }, [searchQuery]);\n\n  const handleChange = ({ target: { value } }) => {\n    setQuery(value);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    setSearchParams({ query });\n  };\n\n  return (\n    <div>\n      <h1>Movies</h1>\n      <form onSubmit={handleSubmit} className=\"form\">\n        <input\n          type=\"text\"\n          value={query}\n          onChange={handleChange}\n          placeholder=\"Search\"\n        />\n        <button type=\"submit\" className=\"imput_button\">\n          search\n        </button>\n      </form>\n      <MoviesList movies={movies} />\n      {isLoading && <p>Loading</p>}\n      {error && <p>Подождите, что-то пошло не так</p>}\n    </div>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst apiKey = '3f22dcea9933d1a88e76ca43d3c13944';\n\nexport const fetchDayTrend = async (\n  endpoints = `trending/movie/day`,\n  options\n) => {\n  const resp = await axios.get(`${endpoints}?api_key=${apiKey}`, options);\n  return resp.data;\n};\n\nexport const fetchMovieByQuery = async (query, options) => {\n  const resp = await axios.get(\n    `search/movie?api_key=${apiKey}&language=en-US&query=${query}&page=1&include_adult=false`,\n    options\n  );\n  return resp.data;\n};\n\nexport const fetchMovieDetsById = async (id, detailEndpoint = '', options) => {\n  const resp = await axios.get(\n    `movie/${id}${detailEndpoint}?api_key=${apiKey}&language=en-US`,\n    options\n  );\n  return resp.data;\n};\n\nexport const fetchCastInfo = async movieId => {\n  const resp = await axios.get(\n    `movie/${movieId}/credits?api_key=${apiKey}&language=en-US`\n  );\n  return resp.data.cast;\n};\n\nexport const fetchReviewsInfo = async movieId => {\n  const resp = await axios.get(\n    `movie/${movieId}/reviews?api_key=${apiKey}&language=en-US`\n  );\n  return resp.data.results;\n};\n"],"names":["isActive","MoviesList","movies","location","useLocation","className","map","movie","to","id","state","from","title","name","useState","query","setQuery","useSearchParams","searchParams","setSearchParams","searchQuery","get","setMovies","isLoading","setIsLoading","error","setError","useEffect","fetchMovieByQuery","results","onSubmit","e","preventDefault","type","value","onChange","target","placeholder","axios","apiKey","fetchDayTrend","endpoints","options","resp","data","fetchMovieDetsById","detailEndpoint","fetchCastInfo","movieId","cast","fetchReviewsInfo"],"sourceRoot":""}